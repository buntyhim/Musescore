# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from requests import get as rqget
from bs4 import BeautifulSoup
import os
from PIL import Image
from fpdf import FPDF
import sys

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(563, 324)
        font = QtGui.QFont()
        font.setFamily("Arial Rounded MT Bold")
        MainWindow.setFont(font)
        MainWindow.setWindowOpacity(1.0)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.go = QtWidgets.QPushButton(self.centralwidget)
        self.go.setGeometry(QtCore.QRect(410, 50, 91, 41))
        self.go.setToolTipDuration(0)
        self.go.setObjectName("go")
        self.url_in = QtWidgets.QTextEdit(self.centralwidget)
        self.url_in.setEnabled(True)
        self.url_in.setGeometry(QtCore.QRect(40, 50, 351, 41))
        self.url_in.setMouseTracking(False)
        self.url_in.setOverwriteMode(False)
        self.url_in.setObjectName("url_in")
        self.consol_out = QtWidgets.QTextBrowser(self.centralwidget)
        self.consol_out.setGeometry(QtCore.QRect(40, 140, 461, 111))
        self.consol_out.setObjectName("consol_out")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.go.clicked.connect(lambda: self.clicked())

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Sheet Music Downloader"))
        self.go.setToolTip(_translate("MainWindow", "Click to Download"))
        self.go.setText(_translate("MainWindow", "Download"))
        self.url_in.setToolTip(_translate("MainWindow", "Enter URL from Musescore website"))
        self.url_in.setText("Enter the Sheet Music")

   


    def piece_downloader(self,url):
    
        parent_dir = os.getcwd()
        
        ##      data fetching from the URL provided
        ##_______________________________________________________________

        webpage_content = rqget(url)                       # fetching the page

        web_text = webpage_content.text
        soup2 = BeautifulSoup(webpage_content.text,"html.parser")   #html parsing
         
        title = soup2.title.string
        title = title[:title.find(' |')]
        self.update_consol(title)
        print('Piece name : ',title)

        #fetching piece image link

        piece_start = web_text.find("https://musescore.com/static/musescore/scoredata/gen")
        piece_end = web_text[piece_start:].find('@')
        piece = web_text[piece_start:piece_start+piece_end]
        print(piece)
        #fetching number of pages
        result_start = web_text.find('pages_count')
        result_end = web_text[result_start+18:].find(',')
        pages_count = int(web_text[result_start+18:result_start+18+result_end])
        self.update_consol("Total number of pages = " + str(pages_count))
        print("Total number of pages = ",pages_count)

        ##     downloading image, file handling and PDF creation
        ##_____________________________________________________________
        
        self.update_consol("Download Started")
        path = os.path.join(parent_dir, title)
        if not os.path.exists(path):
            os.makedirs(path)

        ext_pos = piece.find('@')
        ext = piece[ext_pos-3:]
        print('File extension : ',ext)

        pdf = FPDF()

        for page in range(pages_count):
            current_piece = piece.replace('score_0','score_'+str(page))
            file_path = path+'/'+str(page+1)+ext
            img_data = rqget(current_piece).content
                
            if sys.getsizeof(img_data) > 1024:
                self.update_consol('Downloading Page '+str(page+1)+' of '+str(pages_count))
                print('Downloading Page',page+1,'of ', pages_count)
                with open(file_path,'wb+') as f:
                    f.write(img_data)
                    f.close()
            else:
                self.update_consol('Page '+str(page+1)+' is not available')
                print('Page ', page+1, ' is not available')

        self.update_consol('Download Complete')
        self.update_consol('Geneting PDF')

        for page in range(pages_count):
            file_path = path+'/'+str(page+1)+ext
            if page == 0:
                cover = Image.open(file_path)
                w,h = cover.size
                pdf = FPDF(unit = "pt", format = [w,h])
            image = file_path
            
            pdf.add_page()
            try:
                pdf.image(image,0,0,w,h)
            except:
                self.update_consol('Page '+str(page+1)+' has been left blank intentionally')
                print("Page "+str(page+1)+ " has been left blank intentionally" )

        pdf.output(path+'/'+title+'.pdf', "F")


    def test_output(self):

        for i in range(10):
            self.update_consol(str(i))

    def clicked(self):
        url = self.url_in.toPlainText()
        if url[:22] != 'https://musescore.com/':
            self.update_consol('Enter a valid URL !') 
        else:
            self.consol_out.setText(' ')
            self.piece_downloader(url) 
            self.update_consol('File generated !')       

    def update_consol(self,text):
        self.consol_out.append(text)
        QtWidgets.QApplication.processEvents()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

